#!/usr/bin/python
from ROOT import gStyle, TCanvas, TPad, TH1D
import ROOT as r
from math import log
from math import sqrt

Uncert = 0.07 #0.07
Nexp = 100
RecoBins = 100
EvtRatio = 1.0050307907

OutfileName = "./ensemble_mtt.root"

fSM = r.TFile("~yduh/local/Hathor-2.1-beta/Powheg/results/yukawa_2Dreweighing/tt_PowhegP8.root")
fNP = r.TFile("~yduh/local/Hathor-2.1-beta/Powheg/results/yukawa2_2Dreweighing/tt_PowhegP8.root")
hmtt_SM = fSM.Get("YUKAWA_RECO/yukawa_Mtt")
hmtt_NP = fNP.Get("YUKAWA_RECO/yukawa_Mtt")
mergebins = 15 #int(hmtt_SM.GetXaxis().GetNbins()/RecoBins)
mttmerge_SM = hmtt_SM.Rebin(mergebins)
mttmerge_NP = hmtt_NP.Rebin(mergebins)

minf = -1100
maxf = -600

histQ_SM= r.TH1D("LikeQ_SM", "SM like Q dist", 25, minf, maxf)
histQ_NP = r.TH1D("LikeQ_NP", "NP like Q dist", 25, minf, maxf)


def Q(Nsig, modelType):
	NsigList = []
	for exp in range(Nexp):
		#NsigList.append(r.gRandom.Poisson(Nsig))
		a = r.gRandom.Poisson(Nsig)
		b = r.gRandom.Gaus(1, Uncert)
		#print int(Nsig*b+0.5)
		NsigList.append(int(Nsig*b+0.5))

	mttrandom_SM = {}
	mttrandom_NP = {}
	likeQ_SM = []
	likeQ_NP = []
	for exp in range(Nexp):
		mttrandom_SM[exp] = TH1D("SMPseudo%s"%exp, "SM pseudo", RecoBins, 0, 3000)
		mttrandom_SM[exp].FillRandom(mttmerge_SM, NsigList[exp])
		mttrandom_NP[exp] = TH1D("NPPseudo%s"%exp, "NP pseudo", RecoBins, 0, 3000)
		mttrandom_NP[exp].FillRandom(mttmerge_NP, NsigList[exp])

		logL_SM = 0
		logL_NP = 0
		for mtt in range(300,1000, 30):
			SM_mu_i = mttmerge_SM.GetBinContent(mttmerge_SM.FindFixBin(mtt)) # expected num
			SM_k_i = mttrandom_SM[exp].GetBinContent(mttrandom_SM[exp].FindFixBin(mtt)) # observed num
			NP_mu_i = mttmerge_NP.GetBinContent(mttmerge_NP.FindFixBin(mtt)) # expected num
			NP_k_i = mttrandom_NP[exp].GetBinContent(mttrandom_NP[exp].FindFixBin(mtt)) # observed num

			#logL_SM = SM_k_i* log(SM_mu_i) - SM_mu_i + logL_SM
			#logL_NP = NP_k_i* log(NP_mu_i) - NP_mu_i + logL_NP
			#print logL_SM, logL_NP
			logL_SM = SM_k_i* (log(NP_mu_i) - log(SM_mu_i)) + logL_SM
			logL_NP = NP_k_i* (log(NP_mu_i) - log(SM_mu_i)) + logL_NP
		likeQ_SM.append(-2* logL_SM)
		likeQ_NP.append(-2* logL_NP)

	if modelType == 'SM':
		model = likeQ_SM
	if modelType == 'NP':
		model = likeQ_NP

	#print likeQ
	#return likeQ
	return model

def ensemblefit(histSM, histNP):
	gausSM = r.TF1("Gaussian", "gaus", minf, maxf)
	gausNP = r.TF1("Gaussian", "gaus", minf, maxf)
	histSM.Fit(gausSM)
	histNP.Fit(gausNP)

	gausSM_mean = gausSM.GetParameter(1)
	gausSM_Emean = gausSM.GetParError(1)
	gausSM_width = gausSM.GetParameter(2)
	gausSM_Ewidth = gausSM.GetParError(2)
	gausNP_mean = gausNP.GetParameter(1)
	gausNP_Emean = gausNP.GetParError(1)
	gausNP_width = gausNP.GetParameter(2)
	gausNP_Ewidth = gausNP.GetParError(2)

	dev = gausNP_mean - gausSM_mean
	Edev = sqrt(gausSM_Emean**2 + gausNP_Emean**2)
	print "derivation = ", dev, "+/-", Edev

	devsigma = dev/gausSM_width
	Edevsigma = sqrt((Edev/dev)**2 + (gausSM_Ewidth/gausSM_width)**2)
	print "sigma = ", devsigma, "+/-", Edevsigma



OutFile = r.TFile(OutfileName, "RECREATE")
for exp in range(Nexp):
	histQ_SM.Fill(Q(30000, 'SM')[exp])
	histQ_NP.Fill(Q(30000* EvtRatio, 'NP')[exp])

ensemblefit(histQ_SM, histQ_NP)
histQ_SM.Write()
histQ_NP.Write()

#c1 = r.TCanvas("c1","comparison", 800,1000)
#c1.Divide(1, 2)
#gStyle.SetOptStat(0)
#gStyle.SetLabelSize(2)


#c1.cd(1)
#mttmerge_SM.Draw()
#mttmerge_NP.Draw("same")
#c1.cd(2)
#histQ_SM.SetLineColor(r.kBlue)
#histQ_NP.SetLineColor(r.kRed)
#histQ_NP.Draw()
#histQ_SM.Draw("same")
#c1.cd()


#c2 = r.TCanvas("c2", "fit", 800, 1000)
#c2.Divide(1, 2)
#c2.cd(1)
#ensemblefit(histQ_SM)
#c2.cd(2)
#ensemblefit(histQ_NP)

OutFile.Close()
